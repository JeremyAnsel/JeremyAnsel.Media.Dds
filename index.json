{
  "api/JeremyAnsel.Media.Dds.DdsAdditionalCaps.html": {
    "href": "api/JeremyAnsel.Media.Dds.DdsAdditionalCaps.html",
    "title": "Enum DdsAdditionalCaps",
    "keywords": "Enum DdsAdditionalCaps Namespace: JeremyAnsel.Media.Dds Assembly: JeremyAnsel.Media.Dds.dll Syntax [Flags] public enum DdsAdditionalCaps Fields Name Description CubeMap Required for a cube map. CubeMapAllFaces Required for a cube map. CubeMapNegativeX Required when these surfaces are stored in a cube map. CubeMapNegativeY Required when these surfaces are stored in a cube map. CubeMapNegativeZ Required when these surfaces are stored in a cube map. CubeMapPositiveX Required when these surfaces are stored in a cube map. CubeMapPositiveY Required when these surfaces are stored in a cube map. CubeMapPositiveZ Required when these surfaces are stored in a cube map. Volume Required for a volume texture."
  },
  "api/JeremyAnsel.Media.Dds.DdsAlphaMode.html": {
    "href": "api/JeremyAnsel.Media.Dds.DdsAlphaMode.html",
    "title": "Enum DdsAlphaMode",
    "keywords": "Enum DdsAlphaMode Namespace: JeremyAnsel.Media.Dds Assembly: JeremyAnsel.Media.Dds.dll Syntax public enum DdsAlphaMode Fields Name Description Custom Any alpha channel content is being used as a 4th channel and is not intended to represent transparency (straight or premultiplied). Opaque Any alpha channel content is all set to fully opaque. Premultiplied Any alpha channel content is using premultiplied alpha. The only legacy file formats that indicate this information are 'DX2' and 'DX4'. Straight Any alpha channel content is presumed to use straight alpha. Unknown Alpha channel content is unknown. This is the value for legacy files, which typically is assumed to be 'straight' alpha."
  },
  "api/JeremyAnsel.Media.Dds.DdsCaps.html": {
    "href": "api/JeremyAnsel.Media.Dds.DdsCaps.html",
    "title": "Enum DdsCaps",
    "keywords": "Enum DdsCaps Namespace: JeremyAnsel.Media.Dds Assembly: JeremyAnsel.Media.Dds.dll Syntax [Flags] public enum DdsCaps Fields Name Description Complex Optional; must be used on any file that contains more than one surface (a mipmap, a cubic environment map, or volume texture). Mipmap Optional; should be used for a mipmap. Texture Required."
  },
  "api/JeremyAnsel.Media.Dds.DdsFile.html": {
    "href": "api/JeremyAnsel.Media.Dds.DdsFile.html",
    "title": "Class DdsFile",
    "keywords": "Class DdsFile Inheritance object DdsFile Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: JeremyAnsel.Media.Dds Assembly: JeremyAnsel.Media.Dds.dll Syntax public sealed class DdsFile Properties | Edit this page View Source AlphaMode Declaration public DdsAlphaMode AlphaMode { get; } Property Value Type Description DdsAlphaMode | Edit this page View Source ArraySize Declaration public int ArraySize { get; } Property Value Type Description int | Edit this page View Source Caps Declaration public DdsCaps Caps { get; } Property Value Type Description DdsCaps | Edit this page View Source Caps2 Declaration public DdsAdditionalCaps Caps2 { get; } Property Value Type Description DdsAdditionalCaps | Edit this page View Source Data Declaration public byte[] Data { get; } Property Value Type Description byte[] | Edit this page View Source DataOffset Declaration public int DataOffset { get; } Property Value Type Description int | Edit this page View Source Depth Declaration public int Depth { get; } Property Value Type Description int | Edit this page View Source Format Declaration public DdsFormat Format { get; } Property Value Type Description DdsFormat | Edit this page View Source Height Declaration public int Height { get; } Property Value Type Description int | Edit this page View Source LinearSize Declaration public int LinearSize { get; } Property Value Type Description int | Edit this page View Source MipmapCount Declaration public int MipmapCount { get; } Property Value Type Description int | Edit this page View Source Options Declaration public DdsOptions Options { get; } Property Value Type Description DdsOptions | Edit this page View Source PixelFormat Declaration public DdsPixelFormat PixelFormat { get; } Property Value Type Description DdsPixelFormat | Edit this page View Source ResourceDimension Declaration public DdsResourceDimension ResourceDimension { get; } Property Value Type Description DdsResourceDimension | Edit this page View Source ResourceMiscOptions Declaration public DdsResourceMiscOptions ResourceMiscOptions { get; } Property Value Type Description DdsResourceMiscOptions | Edit this page View Source Width Declaration public int Width { get; } Property Value Type Description int Methods | Edit this page View Source FromFile(string) Declaration public static DdsFile FromFile(string fileName) Parameters Type Name Description string fileName Returns Type Description DdsFile | Edit this page View Source FromStream(Stream) Declaration public static DdsFile FromStream(Stream stream) Parameters Type Name Description Stream stream Returns Type Description DdsFile"
  },
  "api/JeremyAnsel.Media.Dds.DdsFormat.html": {
    "href": "api/JeremyAnsel.Media.Dds.DdsFormat.html",
    "title": "Enum DdsFormat",
    "keywords": "Enum DdsFormat Resource data formats which includes fully-typed and typeless formats. Namespace: JeremyAnsel.Media.Dds Assembly: JeremyAnsel.Media.Dds.dll Syntax public enum DdsFormat Fields Name Description A8P8 8-bit palletized format with 8 bits of alpha that is used for palletized YUV data when the processor processes Blu-Ray data. A8UNorm A single-component, 8-bit unsigned-normalized-integer format for alpha only. AI44 4-bit palletized YUV format that is commonly used for DVD sub-picture. AYuv Most common YUV 4:4:4 video resource format. B4G4R4A4UNorm A four-component, 16-bit unsigned-normalized integer format that supports 4 bits for each channel including alpha. B5G5R5A1UNorm A four-component, 16-bit unsigned-normalized-integer format that supports 5 bits for each color channel and 1-bit alpha. B5G6R5UNorm A three-component, 16-bit unsigned-normalized-integer format that supports 5 bits for blue, 6 bits for green, and 5 bits for red. B8G8R8A8Typeless A four-component, 32-bit typeless format that supports 8 bits for each channel including alpha. B8G8R8A8UNorm A four-component, 32-bit unsigned-normalized-integer format that supports 8 bits for each color channel and 8-bit alpha. B8G8R8A8UNormSrgb A four-component, 32-bit unsigned-normalized standard RGB format that supports 8 bits for each channel including alpha. B8G8R8X8Typeless A four-component, 32-bit typeless format that supports 8 bits for each color channel, and 8 bits are unused. B8G8R8X8UNorm A four-component, 32-bit unsigned-normalized-integer format that supports 8 bits for each color channel and 8 bits unused. B8G8R8X8UNormSrgb A four-component, 32-bit unsigned-normalized standard RGB format that supports 8 bits for each color channel, and 8 bits are unused. BC1Typeless Four-component typeless block-compression format. BC1UNorm Four-component block-compression format. BC1UNormSrgb Four-component block-compression format for sRGB data. BC2Typeless Four-component typeless block-compression format. BC2UNorm Four-component block-compression format. BC2UNormSrgb Four-component block-compression format for sRGB data. BC3Typeless Four-component typeless block-compression format. BC3UNorm Four-component block-compression format. BC3UNormSrgb Four-component block-compression format for sRGB data. BC4SNorm One-component block-compression format. BC4Typeless One-component typeless block-compression format. BC4UNorm One-component block-compression format. BC5SNorm Two-component block-compression format. BC5Typeless Two-component typeless block-compression format. BC5UNorm Two-component block-compression format. BC6HalfSF16 A block-compression format. BC6HalfTypeless A typeless block-compression format. BC6HalfUF16 A block-compression format. BC7Typeless A typeless block-compression format. BC7UNorm A block-compression format. BC7UNormSrgb A block-compression format. D16UNorm A single-component, 16-bit unsigned-normalized-integer format that supports 16 bits for depth. D24UNormS8UInt A 32-bit z-buffer format that supports 24 bits for depth and 8 bits for stencil. D32Float A single-component, 32-bit floating-point format that supports 32 bits for depth. D32FloatS8X24UInt A 32-bit floating-point component, and two unsigned-integer components (with an additional 32 bits). This format supports 32-bit depth, 8-bit stencil, and 24 bits are unused. G8R8G8B8UNorm A four-component, 32-bit unsigned-normalized-integer format. This packed RGB format is analogous to the YUY2 format. Each 32-bit block describes a pair of pixels: (R8, G8, B8) and (R8, G8, B8) where the R8/B8 values are repeated, and the G8 values are unique to each pixel. IA44 4-bit palletized YUV format that is commonly used for DVD sub-picture. NV11 Most common planar YUV 4:1:1 video resource format. NV12 Most common YUV 4:2:0 video resource format. P010 10-bit per channel planar YUV 4:2:0 video resource format. P016 16-bit per channel planar YUV 4:2:0 video resource format. P420Opaque 8-bit per channel planar YUV 4:2:0 video resource format. This format is subsampled where each pixel has its own Y value, but each 2x2 pixel block shares a single U and V value. P8 8-bit palletized format that is used for palletized RGB data when the processor processes ISDB-T data and for palletized YUV data when the processor processes Blu-Ray data. R10G10B10A2Typeless A four-component, 32-bit typeless format that supports 10 bits for each color and 2 bits for alpha. R10G10B10A2UInt A four-component, 32-bit unsigned-integer format that supports 10 bits for each color and 2 bits for alpha. R10G10B10A2UNorm A four-component, 32-bit unsigned-normalized-integer format that supports 10 bits for each color and 2 bits for alpha. R10G10B10XRBiasA2UNorm A four-component, 32-bit 2.8-biased fixed-point format that supports 10 bits for each color channel and 2-bit alpha. R11G11B10Float Three partial-precision floating-point numbers encoded into a single 32-bit value (a variant of s10e5, which is sign bit, 10-bit mantissa, and 5-bit biased (15) exponent). There are no sign bits, and there is a 5-bit biased (15) exponent for each channel, 6-bit mantissa for R and G, and a 5-bit mantissa for B. R16Float A single-component, 16-bit floating-point format that supports 16 bits for the red channel. R16G16B16A16Float A four-component, 64-bit floating-point format that supports 16 bits per channel including alpha. R16G16B16A16SInt A four-component, 64-bit signed-integer format that supports 16 bits per channel including alpha. R16G16B16A16SNorm A four-component, 64-bit signed-normalized-integer format that supports 16 bits per channel including alpha. R16G16B16A16Typeless A four-component, 64-bit typeless format that supports 16 bits per channel including alpha. R16G16B16A16UInt A four-component, 64-bit unsigned-integer format that supports 16 bits per channel including alpha. R16G16B16A16UNorm A four-component, 64-bit unsigned-normalized-integer format that supports 16 bits per channel including alpha. R16G16Float A two-component, 32-bit floating-point format that supports 16 bits for the red channel and 16 bits for the green channel. R16G16SInt A two-component, 32-bit signed-integer format that supports 16 bits for the red channel and 16 bits for the green channel. R16G16SNorm A two-component, 32-bit signed-normalized-integer format that supports 16 bits for the red channel and 16 bits for the green channel. R16G16Typeless A two-component, 32-bit typeless format that supports 16 bits for the red channel and 16 bits for the green channel. R16G16UInt A two-component, 32-bit unsigned-integer format that supports 16 bits for the red channel and 16 bits for the green channel. R16G16UNorm A two-component, 32-bit unsigned-normalized-integer format that supports 16 bits each for the green and red channels. R16SInt A single-component, 16-bit signed-integer format that supports 16 bits for the red channel. R16SNorm A single-component, 16-bit signed-normalized-integer format that supports 16 bits for the red channel. R16Typeless A single-component, 16-bit typeless format that supports 16 bits for the red channel. R16UInt A single-component, 16-bit unsigned-integer format that supports 16 bits for the red channel. R16UNorm A single-component, 16-bit unsigned-normalized-integer format that supports 16 bits for the red channel. R1UNorm A single-component, 1-bit unsigned-normalized integer format that supports 1 bit for the red channel. R24G8Typeless A two-component, 32-bit typeless format that supports 24 bits for the red channel and 8 bits for the green channel. R24UNormX8Typeless A 32-bit format, that contains a 24 bit, single-component, unsigned-normalized integer, with an additional typeless 8 bits. This format has 24 bits red channel and 8 bits unused. R32Float A single-component, 32-bit floating-point format that supports 32 bits for the red channel. R32FloatX8X24Typeless A 32-bit floating-point component, and two typeless components (with an additional 32 bits). This format supports 32-bit red channel, 8 bits are unused, and 24 bits are unused. R32G32B32A32Float A four-component, 128-bit floating-point format that supports 32 bits per channel including alpha. R32G32B32A32SInt A four-component, 128-bit signed-integer format that supports 32 bits per channel including alpha. R32G32B32A32Typeless A four-component, 128-bit typeless format that supports 32 bits per channel including alpha. R32G32B32A32UInt A four-component, 128-bit unsigned-integer format that supports 32 bits per channel including alpha. R32G32B32Float A three-component, 96-bit floating-point format that supports 32 bits per color channel. R32G32B32SInt A three-component, 96-bit signed-integer format that supports 32 bits per color channel. R32G32B32Typeless A three-component, 96-bit typeless format that supports 32 bits per color channel. R32G32B32UInt A three-component, 96-bit unsigned-integer format that supports 32 bits per color channel. R32G32Float A two-component, 64-bit floating-point format that supports 32 bits for the red channel and 32 bits for the green channel. R32G32SInt A two-component, 64-bit signed-integer format that supports 32 bits for the red channel and 32 bits for the green channel. R32G32Typeless A two-component, 64-bit typeless format that supports 32 bits for the red channel and 32 bits for the green channel. R32G32UInt A two-component, 64-bit unsigned-integer format that supports 32 bits for the red channel and 32 bits for the green channel. R32G8X24Typeless A two-component, 64-bit typeless format that supports 32 bits for the red channel, 8 bits for the green channel, and 24 bits are unused. R32SInt A single-component, 32-bit signed-integer format that supports 32 bits for the red channel. R32Typeless A single-component, 32-bit typeless format that supports 32 bits for the red channel. R32UInt A single-component, 32-bit unsigned-integer format that supports 32 bits for the red channel. R8G8B8A8SInt A four-component, 32-bit signed-integer format that supports 8 bits per channel including alpha. R8G8B8A8SNorm A four-component, 32-bit signed-normalized-integer format that supports 8 bits per channel including alpha. R8G8B8A8Typeless A four-component, 32-bit typeless format that supports 8 bits per channel including alpha. R8G8B8A8UInt A four-component, 32-bit unsigned-integer format that supports 8 bits per channel including alpha. R8G8B8A8UNorm A four-component, 32-bit unsigned-normalized-integer format that supports 8 bits per channel including alpha. R8G8B8A8UNormSrgb A four-component, 32-bit unsigned-normalized integer sRGB format that supports 8 bits per channel including alpha. R8G8B8G8UNorm A four-component, 32-bit unsigned-normalized-integer format. This packed RGB format is analogous to the UYVY format. Each 32-bit block describes a pair of pixels: (R8, G8, B8) and (R8, G8, B8) where the R8/B8 values are repeated, and the G8 values are unique to each pixel. R8G8SInt A two-component, 16-bit signed-integer format that supports 8 bits for the red channel and 8 bits for the green channel. R8G8SNorm A two-component, 16-bit signed-normalized-integer format that supports 8 bits for the red channel and 8 bits for the green channel. R8G8Typeless A two-component, 16-bit typeless format that supports 8 bits for the red channel and 8 bits for the green channel. R8G8UInt A two-component, 16-bit unsigned-integer format that supports 8 bits for the red channel and 8 bits for the green channel. R8G8UNorm A two-component, 16-bit unsigned-normalized-integer format that supports 8 bits for the red channel and 8 bits for the green channel. R8SInt A single-component, 8-bit signed-integer format that supports 8 bits for the red channel. R8SNorm A single-component, 8-bit signed-normalized-integer format that supports 8 bits for the red channel. R8Typeless A single-component, 8-bit typeless format that supports 8 bits for the red channel. R8UInt A single-component, 8-bit unsigned-integer format that supports 8 bits for the red channel. R8UNorm A single-component, 8-bit unsigned-normalized-integer format that supports 8 bits for the red channel. R9G9B9E5SharedExp Three partial-precision floating-point numbers encoded into a single 32-bit value all sharing the same 5-bit exponent (variant of s10e5, which is sign bit, 10-bit mantissa, and 5-bit biased (15) exponent). There is no sign bit, and there is a shared 5-bit biased (15) exponent and a 9-bit mantissa for each channel. Unknown The format is not known. X24TypelessG8UInt A 32-bit format, that contains a 24 bit, single-component, typeless format, with an additional 8 bit unsigned integer component. This format has 24 bits unused and 8 bits green channel. X32TypelessG8X24UInt A 32-bit typeless component, and two unsigned-integer components (with an additional 32 bits). This format has 32 bits unused, 8 bits for green channel, and 24 bits are unused. Y210 10-bit per channel packed YUV 4:2:2 video resource format. Y216 16-bit per channel packed YUV 4:2:2 video resource format. Y410 10-bit per channel packed YUV 4:4:4 video resource format. Y416 16-bit per channel packed YUV 4:4:4 video resource format. Yuy2 8-bit per channel planar YUV 4:2:0 video resource format."
  },
  "api/JeremyAnsel.Media.Dds.DdsFourCC.html": {
    "href": "api/JeremyAnsel.Media.Dds.DdsFourCC.html",
    "title": "Enum DdsFourCC",
    "keywords": "Enum DdsFourCC Namespace: JeremyAnsel.Media.Dds Assembly: JeremyAnsel.Media.Dds.dll Syntax public enum DdsFourCC Fields Name Description BC4S BC4U BC5S BC5U D3DFMT_A16B16G16R16 D3DFMT_A16B16G16R16F D3DFMT_A32B32G32R32F D3DFMT_G16R16F D3DFMT_G32R32F D3DFMT_Q16W16V16U16 D3DFMT_R16F D3DFMT_R32F DX10 DXT1 DXT2 DXT3 DXT4 DXT5 GRGB RGBG YUY2"
  },
  "api/JeremyAnsel.Media.Dds.DdsHelpers.html": {
    "href": "api/JeremyAnsel.Media.Dds.DdsHelpers.html",
    "title": "Class DdsHelpers",
    "keywords": "Class DdsHelpers Inheritance object DdsHelpers Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: JeremyAnsel.Media.Dds Assembly: JeremyAnsel.Media.Dds.dll Syntax public static class DdsHelpers Methods | Edit this page View Source GetBitsPerPixel(DdsFormat) Declaration public static int GetBitsPerPixel(DdsFormat format) Parameters Type Name Description DdsFormat format Returns Type Description int | Edit this page View Source GetSurfaceInfo(int, int, DdsFormat, out int, out int, out int) Declaration public static void GetSurfaceInfo(int width, int height, DdsFormat format, out int outNumBytes, out int outRowBytes, out int outNumRows) Parameters Type Name Description int width int height DdsFormat format int outNumBytes int outRowBytes int outNumRows | Edit this page View Source MakeSrgb(DdsFormat) Declaration public static DdsFormat MakeSrgb(DdsFormat format) Parameters Type Name Description DdsFormat format Returns Type Description DdsFormat"
  },
  "api/JeremyAnsel.Media.Dds.DdsOptions.html": {
    "href": "api/JeremyAnsel.Media.Dds.DdsOptions.html",
    "title": "Enum DdsOptions",
    "keywords": "Enum DdsOptions Namespace: JeremyAnsel.Media.Dds Assembly: JeremyAnsel.Media.Dds.dll Syntax [Flags] public enum DdsOptions Fields Name Description Caps Required in every .dds file. Depth Required in a depth texture. Height Required in every .dds file. LinearSize Required when pitch is provided for a compressed texture. MipmapCount Required in a mipmapped texture. Pitch Required when pitch is provided for an uncompressed texture. PixelFormat Required in every .dds file. Width Required in every .dds file."
  },
  "api/JeremyAnsel.Media.Dds.DdsPixelFormat.html": {
    "href": "api/JeremyAnsel.Media.Dds.DdsPixelFormat.html",
    "title": "Class DdsPixelFormat",
    "keywords": "Class DdsPixelFormat Inheritance object DdsPixelFormat Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: JeremyAnsel.Media.Dds Assembly: JeremyAnsel.Media.Dds.dll Syntax public sealed class DdsPixelFormat Properties | Edit this page View Source AlphaBitMask Declaration public uint AlphaBitMask { get; } Property Value Type Description uint | Edit this page View Source BlueBitMask Declaration public uint BlueBitMask { get; } Property Value Type Description uint | Edit this page View Source FourCC Declaration public DdsFourCC FourCC { get; } Property Value Type Description DdsFourCC | Edit this page View Source GreenBitMask Declaration public uint GreenBitMask { get; } Property Value Type Description uint | Edit this page View Source Options Declaration public DdsPixelFormatOptions Options { get; } Property Value Type Description DdsPixelFormatOptions | Edit this page View Source RedBitMask Declaration public uint RedBitMask { get; } Property Value Type Description uint | Edit this page View Source RgbBitCount Declaration public int RgbBitCount { get; } Property Value Type Description int"
  },
  "api/JeremyAnsel.Media.Dds.DdsPixelFormatOptions.html": {
    "href": "api/JeremyAnsel.Media.Dds.DdsPixelFormatOptions.html",
    "title": "Enum DdsPixelFormatOptions",
    "keywords": "Enum DdsPixelFormatOptions Namespace: JeremyAnsel.Media.Dds Assembly: JeremyAnsel.Media.Dds.dll Syntax [Flags] public enum DdsPixelFormatOptions Fields Name Description Alpha Used in some older DDS files for alpha channel only uncompressed data (dwRGBBitCount contains the alpha channel bitcount; dwABitMask contains valid data). AlphaPixels Texture contains alpha data; dwRGBAlphaBitMask contains valid data. BumpDuDv Bump-map data in the pixel format is valid. Bump-map information is in the dwBumpBitCount, dwBumpDuBitMask, dwBumpDvBitMask, and dwBumpLuminanceBitMask members. FourCC Texture contains compressed RGB data; dwFourCC contains valid data. Luminance Used in some older DDS files for single channel color uncompressed data (dwRGBBitCount contains the luminance channel bit count; dwRBitMask contains the channel mask). Can be combined with DDPF_ALPHAPIXELS for a two channel DDS file. Rgb Texture contains uncompressed RGB data; dwRGBBitCount and the RGB masks (dwRBitMask, dwRBitMask, dwRBitMask) contain valid data."
  },
  "api/JeremyAnsel.Media.Dds.DdsResourceDimension.html": {
    "href": "api/JeremyAnsel.Media.Dds.DdsResourceDimension.html",
    "title": "Enum DdsResourceDimension",
    "keywords": "Enum DdsResourceDimension Identifies the type of resource being used. Namespace: JeremyAnsel.Media.Dds Assembly: JeremyAnsel.Media.Dds.dll Syntax public enum DdsResourceDimension Fields Name Description Texture1D Resource is a 1D texture. Texture2D Resource is a 2D texture. Texture3D Resource is a 3D texture. Unknown Resource is of unknown type."
  },
  "api/JeremyAnsel.Media.Dds.DdsResourceMiscOptions.html": {
    "href": "api/JeremyAnsel.Media.Dds.DdsResourceMiscOptions.html",
    "title": "Enum DdsResourceMiscOptions",
    "keywords": "Enum DdsResourceMiscOptions Identifies options for resources. Namespace: JeremyAnsel.Media.Dds Assembly: JeremyAnsel.Media.Dds.dll Syntax [Flags] public enum DdsResourceMiscOptions Fields Name Description None No option. TextureCube Sets a resource to be a cube texture created from a Texture2DArray that contains 6 textures."
  },
  "api/JeremyAnsel.Media.Dds.html": {
    "href": "api/JeremyAnsel.Media.Dds.html",
    "title": "Namespace JeremyAnsel.Media.Dds",
    "keywords": "Namespace JeremyAnsel.Media.Dds Classes DdsFile DdsHelpers DdsPixelFormat Enums DdsAdditionalCaps DdsAlphaMode DdsCaps DdsFormat Resource data formats which includes fully-typed and typeless formats. DdsFourCC DdsOptions DdsPixelFormatOptions DdsResourceDimension Identifies the type of resource being used. DdsResourceMiscOptions Identifies options for resources."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "JeremyAnsel.Media.Dds",
    "keywords": "JeremyAnsel.Media.Dds This is the documentation for JeremyAnsel.Media.Dds."
  },
  "index.html": {
    "href": "index.html",
    "title": "JeremyAnsel.Media.Dds",
    "keywords": "JeremyAnsel.Media.Dds JeremyAnsel.Media.Dds is a .Net library to handle DirectX .dds files."
  }
}